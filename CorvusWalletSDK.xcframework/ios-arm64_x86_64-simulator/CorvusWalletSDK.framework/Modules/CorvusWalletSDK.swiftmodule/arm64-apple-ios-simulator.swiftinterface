// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CorvusWalletSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
@_exported import CorvusWalletSDK
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc public class CorvusWallet : ObjectiveC.NSObject {
  public static var shopURL: Swift.String?
  @objc public static let noValueInt64: Swift.Int64
  @objc public static let noValueDouble: Swift.Double
  @objc public static let sdkVersion: Swift.String?
  @objc public static var logLevel: CorvusWalletSDK.LogLevel {
    @objc get
    @objc set
  }
  @objc public static var environment: CorvusWalletSDK.Environment
  @objc public static func checkout(with checkout: CorvusWalletSDK.Checkout, signature: Swift.String, completion: ((Swift.String?, CorvusWalletSDK.CheckoutResult) -> Swift.Void)? = nil)
  @objc public static func handleWalletAppCallback(url: Foundation.URL) -> Swift.Bool
  @objc public static func createSignatureString(for checkout: CorvusWalletSDK.Checkout) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension CorvusWalletSDK.CorvusWallet {
  @objc public static func createCWCheckoutViewController() -> UIKit.UIViewController
}
@objc public class Checkout : ObjectiveC.NSObject {
  @objc public var storeId: Swift.Int
  @objc public var orderNumber: Swift.String
  @objc public var language: CorvusWalletSDK.Language
  @objc public var cart: [CorvusWalletSDK.CartItem]
  @objc public var currency: CorvusWalletSDK.Currency
  @objc public var amount: Swift.Double
  @objc public var requireComplete: Swift.Bool
  @objc public var bestBefore: Swift.Int64
  @objc public var discountAmount: Swift.Double
  @objc public var preselectedCard: CorvusWalletSDK.CardType
  @objc public var installments: CorvusWalletSDK.InstallmentsParams?
  @objc public var isSubscription: Swift.Bool
  @objc public var paymentNumber: Swift.Int64
  @objc public var cardHolder: CorvusWalletSDK.Cardholder?
  @objc public var installmentsMap: CorvusWalletSDK.InstallmentMap?
  @objc public var completion: ((Swift.String?, CorvusWalletSDK.CheckoutResult) -> Swift.Void)?
  @objc public var useCardProfiles: Foundation.NSNumber?
  @objc public var userCardProfilesId: Swift.String?
  @objc public var isSdk: Swift.Bool
  @objc public var version: Swift.String
  required public init(storeId: Swift.Int, orderNumber: Swift.String, language: CorvusWalletSDK.Language, cart: [CorvusWalletSDK.CartItem], currency: CorvusWalletSDK.Currency, amount: Swift.Double, requireComplete: Swift.Bool, bestBefore: Swift.Int64 = CorvusWallet.noValueInt64, discountAmount: Swift.Double = CorvusWallet.noValueDouble, cardHolder: CorvusWalletSDK.Cardholder? = nil, installments: CorvusWalletSDK.InstallmentsParams? = nil, installmentsMap: CorvusWalletSDK.InstallmentMap? = nil, useCardProfiles: Swift.Bool? = nil, userCardProfilesId: Swift.String? = nil, isSdk: Swift.Bool, version: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class InstallmentsParams : ObjectiveC.NSObject {
  public var numberOfInstallments: Swift.Int?
  @objc public var paymentAll: CorvusWalletSDK.InstallmentTuple?
  @objc public var paymentAllDynamic: CorvusWalletSDK.DynamicInstallmentsParams?
  @objc deinit
}
extension CorvusWalletSDK.InstallmentsParams {
  @objc public static func createWithPaymentAll(oneTimePayment: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.InstallmentsParams
  @objc public static func createWithFixedNumberOfInstallments(_ numberOfInstallments: Swift.Int) -> CorvusWalletSDK.InstallmentsParams
  @objc public static func createWithDynamicPayment(_ paymentAllDynamic: CorvusWalletSDK.DynamicInstallmentsParams) -> CorvusWalletSDK.InstallmentsParams
}
extension CorvusWalletSDK.Cardholder {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var signatureString: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class InstallmentTuple : ObjectiveC.NSObject {
  @objc public var oneTime: Swift.Bool
  @objc public var lowerBound: Swift.Int
  @objc public var upperBound: Swift.Int
  @objc deinit
}
@objc public enum Language : Swift.UInt {
  case en
  case hr
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum CurrencyValue : Swift.UInt {
  case hrk
  case eur
  case rsd
  case aud
  case cad
  case czk
  case dkk
  case huf
  case jpy
  case nok
  case sek
  case chf
  case gbp
  case usd
  case pln
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public class Currency : ObjectiveC.NSObject {
  @objc required public init(_ type: CorvusWalletSDK.CurrencyValue)
  @objc public var code: Swift.String {
    @objc get
  }
  @objc public var symbol: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DynamicInstallmentsParams : ObjectiveC.NSObject {
  @objc public var paymentAmex: CorvusWalletSDK.InstallmentTuple?
  @objc public var paymentDina: CorvusWalletSDK.InstallmentTuple?
  @objc public var paymentDiners: CorvusWalletSDK.InstallmentTuple?
  @objc public var paymentVisa: CorvusWalletSDK.InstallmentTuple?
  @objc public var paymentMaster: CorvusWalletSDK.InstallmentTuple?
  @objc public var paymentMaestro: CorvusWalletSDK.InstallmentTuple?
  @objc public var paymentDiscover: CorvusWalletSDK.InstallmentTuple?
  @objc public var paymentJcb: CorvusWalletSDK.InstallmentTuple?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DynamicInstallmentsBuilder : ObjectiveC.NSObject {
  @objc public func build() -> CorvusWalletSDK.DynamicInstallmentsParams
  @objc public func setupAmexDynamic(oneTime: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.DynamicInstallmentsBuilder
  @objc public func setupDinaDynamic(oneTime: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.DynamicInstallmentsBuilder
  @objc public func setupDinersDynamic(oneTime: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.DynamicInstallmentsBuilder
  @objc public func setupVisaDynamic(oneTime: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.DynamicInstallmentsBuilder
  @objc public func setupMasterDynamic(oneTime: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.DynamicInstallmentsBuilder
  @objc public func setupMaestroDynamic(oneTime: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.DynamicInstallmentsBuilder
  @objc public func setupDiscoverDynamic(oneTime: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.DynamicInstallmentsBuilder
  @objc public func setupJcbDynamic(oneTime: Swift.Bool, lowerBound: Swift.Int, upperBound: Swift.Int) -> CorvusWalletSDK.DynamicInstallmentsBuilder
  @objc override dynamic public init()
  @objc deinit
}
@objc public class Cardholder : ObjectiveC.NSObject {
  @objc public var firstName: Swift.String?
  @objc public var lastName: Swift.String?
  @objc public var address: Swift.String?
  @objc public var city: Swift.String?
  @objc public var zip: Swift.String?
  @objc public var country: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var email: Swift.String?
  @objc public var phone: Swift.String?
  required public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, address: Swift.String? = nil, city: Swift.String? = nil, zip: Swift.String? = nil, country: Swift.String? = nil, countryCode: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil)
  @objc deinit
}
@objc public enum CardType : Swift.UInt {
  case none
  case amex
  case diners
  case discover
  case maestro
  case master
  case visa
  case dina
  case jcb
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum CheckoutResult : Swift.UInt {
  case success = 0
  case canceled
  case networkError
  case checkoutError
  case validationFailed
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public enum CorvusSdkError : Foundation.LocalizedError {
  case emptyOrderNumber(message: Swift.String)
  case emptyCart(message: Swift.String)
  case emptySignature(message: Swift.String)
  case mulitpleInstallmentsParamsPresent(message: Swift.String)
  public var description: Swift.String? {
    get
  }
}
@objc public enum Environment : Swift.Int {
  case test
  case production
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class InstallmentsHelper {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class InstallmentsMapBuilder : ObjectiveC.NSObject {
  @objc public func create(withCard cardType: CorvusWalletSDK.CardType, withDiscounts discounts: [CorvusWalletSDK.Discount]) -> CorvusWalletSDK.InstallmentsMapBuilder
  @objc public func build() -> CorvusWalletSDK.InstallmentMap?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class InstallmentMap : ObjectiveC.NSObject, Swift.Codable {
  public var installments: [CorvusWalletSDK.CardConfiguration]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case installments
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class CardConfiguration : ObjectiveC.NSObject, Swift.Codable {
  public var cardName: Swift.String
  public var discounts: [CorvusWalletSDK.Discount]
  @objc override dynamic public init()
  @objc public init(_ cardType: CorvusWalletSDK.CardType, _ discounts: [CorvusWalletSDK.Discount])
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case cardName
    case discounts
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class Discount : ObjectiveC.NSObject, Swift.Codable {
  public var numberOfInstallments: Swift.Int
  public var amount: Swift.Double
  public var discountedAmount: Swift.Double
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case numberOfInstallments
    case amount
    case discountedAmount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc public init(numberOfInstallments: Swift.Int, amount: Swift.Double, discountedAmount: Swift.Double)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class DiscountsBuilder : ObjectiveC.NSObject {
  @objc public func add(numberOfInstallments: Swift.Int, amount: Swift.Double, discountedAmount: Swift.Double) -> CorvusWalletSDK.DiscountsBuilder
  @objc public func build() -> [CorvusWalletSDK.Discount]
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LogLevel : Swift.UInt {
  case none = 0
  case error
  case info
  case debug
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public class CartItem : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var quantity: Swift.Int
  public var image: UIKit.UIImage
  required public init(name: Swift.String, quantity: Swift.Int, image: UIKit.UIImage)
  @objc deinit
}
extension CorvusWalletSDK.Language : Swift.Equatable {}
extension CorvusWalletSDK.Language : Swift.Hashable {}
extension CorvusWalletSDK.Language : Swift.RawRepresentable {}
extension CorvusWalletSDK.CurrencyValue : Swift.Equatable {}
extension CorvusWalletSDK.CurrencyValue : Swift.Hashable {}
extension CorvusWalletSDK.CurrencyValue : Swift.RawRepresentable {}
extension CorvusWalletSDK.CardType : Swift.Equatable {}
extension CorvusWalletSDK.CardType : Swift.Hashable {}
extension CorvusWalletSDK.CardType : Swift.RawRepresentable {}
extension CorvusWalletSDK.CheckoutResult : Swift.Equatable {}
extension CorvusWalletSDK.CheckoutResult : Swift.Hashable {}
extension CorvusWalletSDK.CheckoutResult : Swift.RawRepresentable {}
extension CorvusWalletSDK.Environment : Swift.Equatable {}
extension CorvusWalletSDK.Environment : Swift.Hashable {}
extension CorvusWalletSDK.Environment : Swift.RawRepresentable {}
extension CorvusWalletSDK.InstallmentMap.CodingKeys : Swift.Equatable {}
extension CorvusWalletSDK.InstallmentMap.CodingKeys : Swift.Hashable {}
extension CorvusWalletSDK.InstallmentMap.CodingKeys : Swift.RawRepresentable {}
extension CorvusWalletSDK.CardConfiguration.CodingKeys : Swift.Equatable {}
extension CorvusWalletSDK.CardConfiguration.CodingKeys : Swift.Hashable {}
extension CorvusWalletSDK.CardConfiguration.CodingKeys : Swift.RawRepresentable {}
extension CorvusWalletSDK.Discount.CodingKeys : Swift.Equatable {}
extension CorvusWalletSDK.Discount.CodingKeys : Swift.Hashable {}
extension CorvusWalletSDK.Discount.CodingKeys : Swift.RawRepresentable {}
extension CorvusWalletSDK.LogLevel : Swift.Equatable {}
extension CorvusWalletSDK.LogLevel : Swift.Hashable {}
extension CorvusWalletSDK.LogLevel : Swift.RawRepresentable {}
